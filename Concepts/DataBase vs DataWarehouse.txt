1.数据仓库是一种结构体系，而数据库是一种具体技术。
拿MySQL这个数据库和Apache Hive这个数据仓库为例。这里Hive事实上就是一个很宏大的“体系结构”。
它可以把元数据保存在MySQL、Oracle或者Derby这些具体的数据库“技术”里；它在进行查询时把SQL转化成MapReduce job，
这里它又用到了MapReduce计算模型这种“技术”。
再抽象一下，数据仓库和数据库的关系就像川菜和辣椒的关系一样。当我吃川菜的时候，刺激我的主要是川菜的辣。
但是世界使用辣椒的门派也很多，韩国料理里也有辣椒，但是这和川菜就是不一样。川菜不仅仅使用了辣椒，还有其他烹饪技法使它具有鲜明特征。
而单独使用MySQL虽然可以查一查简单东西，但是不能达到数据仓库“支持决策”这一高度。就像单独使用辣椒可以爽爽，但是没有办法搞出川菜这个能做招牌的地方菜系。
从高处看这些概念会好一点：数据仓库是伴随着信息与决策支持系统的发展过程产生的，而数据库并不是。

2.数据库/数据仓库的用户群体和工作场景不同数据库属于操作型系统，数据仓库属于分析性系统。
操作性系统（数据库）的用户群体是大量客户，每次操作修改的数据量非常小，对时间敏感度非常高。
分析性系统（数据仓库）的用户是决策人员，他们不修改数据但是会分析大量数据，而且他们对得出结果的时间不敏感。
比如说微博每天有上千万用户在发微博、修改个人资料，每个人都只修改属于自己的那几条数据，同时希望修改后立刻可以用。
而为数不多的决策者希望通过微博进行挖掘，他们不可能修改用户数据，但是他们会访问大量数据。最后他们对时间不敏感，等到一个结果跑5分钟到1小时都可以的。
你可以看出这两种需求根本上是不一样的。所以操作型处理及数据要和分析型处理及数据分开。

3. 为什么需要分离的数据仓库：RDBMS和Data warehouse的区别。
RDBMS是为已知的任务(CRUD操作/更高级的SQL命令)和负载而设计的，如使用主码索引(primary key，作为tuple查询的依据)和散列(hash，作为理论上最优越的数据集合存储形式)等设计来优化固定的操作（CRUD等）而RDBMS的事务机制是关系数据库的一大最典型特征。
举一个经典的例子：大富翁银行有一个账户，我们称之为“孙小美账户”孙小美通过网上银行和ATM等多种方式从她的账户同时取钱，假设卡中有10000元，她的网上操作和ATM取款都是10000元。显然我们不应该让孙小美取出两万元，那么这就涉及到事务的操作了，即使是同时的请求，假设银行同时有两个服务进程接受了这两个取款请求，设为进程A, B进程A取出了10000元，成功完成事务。进程B在取钱过程中执行账户余额查询，出现异常，事务中止。如果没有这样的机制，RDBMS的数据就会出现异常，导致多并发的操作无法正常执行，造成实际上的经济损失。
数据仓库的查询通常是大量数据的汇总级计算，需要多维的数据组织，由于我们的数据并不是实时的最新数据，而是历史数据，我们在执行数据挖掘任务时通常只需要只读操作，这就表示我们并不需要RDBMS中的事务机制，这对拥有海量数据的数据仓库而言，节省了很大的开下，大大提高了OLAP系统的并行执行速度和数据吞吐量。
